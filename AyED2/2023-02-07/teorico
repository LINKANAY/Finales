/*Primer ejercicio*/
/*Algoritmos Voraces*/
/*n dias de vacaciones
m raciones diarias
se cumple m>n
cada racion tiene fecha de venciminto Vi, contada en dias desde el momento que llegas a la montaña.

Encontrar la mejor manera de organizar las viandas diarias, de manera que la cantidad que se vencen sin ser comidas sea minima.

Debera indicar para cada dia j, 1<=j<=n, que vianda es la que comera, asegurando que nunca comera algo vencido.

Se pide:

a. indicar de manera simple y concreta, cual es el criterio de seleccion voraz para construir la solucion.
b. indicar que estructura de datos utilizara para resolver el problema.
c. explicar en palabras como resolvera el problema el algoritmo.
d. implementar el algoritmo en el lenguaje de la materia de manera precisa.
*/

--a. 
Seleccionar la comida mas proxima a vencer

--b. 
type Comida = tuple
                id:nat
                venciminto:nat
            end tuple

--c.
El algoritmo sera resuelto tomando el conjunto de comidas e ir filtrando por "la mas proxima a vencer" en base al dia actual, asi mismo eliminar las que ya no esten aptas para el consumo, de esta manera se logre organizar la comida para cada dia hasta que se complete los n dias. la solucion sera un arreglo que aclara el dia y la comida a consumir.

--d.
--implementacion

fun organizarComida(C: Set of Comida, dias:nat) ret res:array[1...n] of Comida
    --variables
    var copyC: Set of comida
    var racion: comida
    var dia: nat

    --inicializar variables
    copyC = copy_set(C)
    dia = 1

    --ejecucion
    while (dia <= dias) do ->
        elimComidaVencida(copyC, dia)           /*Eliminar comida vencida*/
        racion = select_racion(copyC, dia)      /*Algoritmo Voraz, Elegir comida mas proxima a vencer*/
        res[dia] = racion                       /*Agrego la comiad al arreglo de salida*/
        elim(copyC, racion)                     /*elimino la racion ya evaluada del conjunto*/
        dia = dia + 1                           /*incremento el dia*/
    od
    set_destroy(copyC)
end fun

fun select_racion(C: Set of Comida, dia:nat) ret racionF:comida
    --variables
    var copyC: Set of Comida
    var racion: Comida

    --inicializar variables
    copyC = set_copy(C)

    --ejecucion buscar y devolver comida mas proxima a vencer
    racionF = get(copyC)
    elim(copyC, racionF)
    while(not is_empty_set(copyC)) do ->
        racion = get(copyC)
        if(racionF.venciminto > racion.venciminto) ->
            racionF = racion
            elim(copyC, racion)
        fi
    od
    set_destroy(copyC)
end fun

proc elimComidaVencida(in/out C: Set of comida, in dia:nat)
    --variables
    var copyC: Set of comida
    var racion: Comida

    --inicializar variables
    copyC = set_copy(C)

    --ejecucion eliminar comida vencida
    while (not is_empty_set(copyC)) do ->
        racion = get(copyC)
        if(racion.venciminto < dia)
            elim(C, racion)
        fi
        elim(copyC, racion)
    od
    set_destroy(copyC)
end proc

/*Segundo ejercicio*/
/*BACKTRACKING*/
tablero de 9x9
Un jugador se coloca en una casilla a elección de la primera fila y se mueve avanzando en las filas y moviéndose a una columna adyacente o quedándose en la misma columna. 
En cada movimiento, el jugador suma los puntos correspondientes al número de la casilla, pero nunca puede pisar una casilla de manera tal que el puntaje acumulado, contando esa casilla, dé un valor negativo. 
El juego termina cuando se llega a la novena fila, y el puntaje total es la suma de los valores de cada casilla por la que el jugador pasó.

--Segun se interpreta del enunciado no hace movimientos diagonales
--se genera tabla con valores aleatorios en un rango de -10 a 10
[  5   7   7  -2   7 -10  -3  -9  -2]
[  5 -10   0  -2  10  -7   4   9  -3]
[ -2  -3   5  -3  -8  -3   6  -4  -7]
[ -5   4  -7   9   0   4   8   1  -7]
[  8 -10   0   9   2   7  -5   8  -4]
[  5   0  -7   1 -10   1  10  -8  -4]
[  4  -5   1  10   7   6  -2  -4   9]
[  8  -3   1   6  -1  -7   9  -5  -8]
[ -6   2 -10   5  -9  -3  -2  -7 -10]

--se genera una ruta que cumpla el enunciado
[F,C] = 1,3 - 2,3 - 3,3 - 3,4 - 4,4 - 5,4 - 6,4 - 7,4 - 8,4 - 9,4 = 49

(a) Especicar precisamente qué calcula la función recursiva que resolverá el problema, indicando qué argumentos
toma y la utilidad de cada uno.
(b) Dar la llamada o la expresión principal que resuelve el problema.
(c) Denfinir la función en notación matemática.

--a
La funcion recursiva calcula el valor maximo que se pueda conseguir mientras se mueble entre las filas y columnas tratando de llegar a la ultima fila.

Recorrido(fil,col)
fil = indica en que fila estoy
col = indica en que columna estoy

--b
expresion principal
Recorrido(F,C)
max(Recorrido(1,[1...9]))

--c
notacion matemática
Recorrido(i,j):
--fuera de los limites permitidos
-inf                                                                    si i<1 or i>9 or j<1 or j>9
--estoy en la ultima fila
X                                                                       si i = 9 and (x hasta i-1 + T[9,j]) >= 0
-inf                                                                    si i = 9 and (x hasta i-1 + T[9,j]) < 0
--estoy dentro de los limites permitidos y no es la ultima casilla
T[i,j] + max(Recorrido(i-1,j-1), Recorrido(i-1,j), Recorrido(i-1,j+1))   si 1<i<9 and 0<j<10 

X es la suma acomulada de las casillas recorridas

/*Tercer Ejercicio*/
/*Programacion Dinamica*/
fun Recorrido (tablero:array[1...9,1...9] of nat) ret sum:nat
    --variables
    var T: array[1...9,1...9] of nat
    sum = 0
    --caso base
    for j = 1 to 9 do
        if (tablero[1,j] >= 0) then
            T[1,j] = tablero[1,j]
        else
            T[1,j] = -inf
        fi
    od

    for i = 1 to 9 do
        T[i,0] = -inf
        T[i,10] = -inf
    od

    --caso recursivo
    for i = 2 to 9 do
        for j = 1 to 9 do
            x = T[i,j] + max(T[i-1,j-1], T[i-1,j], T[i-1,j+1])
            if (x >= 0) then
                T[i,j] = x
            else
                T[i,j] = -inf
            fi
        od
    od
    
    --calcular el maximo
    for j = 1 to 9 do
        if (T[9,j] > sum) then
            sum = T[9,j]
        fi
    od
end fun

(a). Qué dimensiones tiene la tabla que el algoritmo debe llenar?
la tabla tiene 2 dimensiones
(b). En qué orden se llena la misma?
se llena de arriba hacia abajo y de izquierda a derecha
(c). Se podría llenar de otra forma? En caso armativo indique cuál.
Si, se podria llenar de izquierda a derecha

/*Cuarto Ejercicio*/
Para cada uno de los siguientes algoritmos determinar por separado cada uno de los siguientes incisos.
(a) Qué hace? Cuáles son las precondiciones necesarias para haga eso?
(b) Cómo lo hace?
(c) El orden del algoritmo, analizando los distintos casos posibles.
(d) Proponer nombres más adecuados para los identicadores (de variables, funciones y procedimientos).

--[1,7,3,5,2,4,6]
proc p(a: array[1..n] of nat)
    var d: nat
    for i:= 1 to n do
        d:= i
        for j:= i+1 to n do
            if a[j] < a[d] then 
                d:= j 
            fi
        od
        swap(a, i, d)
    od
end proc
--a
El procedimiento ordena un arreglo de menor a mayor, de precondiciones necesita un arreglo de al menos 2 elementos
--b
El procedimiento recorre el arreglo y compara los elementos para ordenarlos
--c
El ordden del algoritmo es O(n^2)
--d
proc ordenarArreglo(a: array[1..n] of nat)

--[1,7,3,5,2,4,6]
fun f(a: array[1..n] of nat) ret b : array[1..n] of nat
    var d: nat
    for i:= 1 to n do 
        b[i] := i 
    od
    for i:= 1 to n do
        d:= i
        for j:= i+1 to n do
            if a[b[j]] < a[b[d]] then 
                d:= j 
            fi
        od
        swap(b, i, d)
    od
end fun

--a
El procedimiento ordena un arreglo de menor a mayor usando otro arreglo como referencia, de precondiciones necesita un arreglo de al menos 2 elementos
--b
El procedimiento recorre el arreglo y compara los elementos para ordenarlos usando otro arreglo como referencia
--c
El ordden del algoritmo es O(n^2)
--d
fun ordenarArreglo(a: array[1..n] of nat) ret b : array[1..n] of nat

/*quinto ejercicio*/
Dada la especicación del tad Cola:
spec Queue of T where
constructors
fun empty_queue() ret q : Queue of T
{- crea una cola vacía. -}
proc enqueue (in/out q : Queue of T, in e : T)
{- agrega el elemento e al nal de la cola q. -}
operations
fun is_empty_queue(q : Queue of T) ret b : Bool
{- Devuelve True si la cola es vacía -}
fun rst(q : Queue of T) ret e : T
{- Devuelve el elemento que se encuentra al comienzo de q. -}
{- PRE: not is_empty_queue(q) -}
proc dequeue (in/out q : Queue of T)
{- Elimina el elemento que se encuentra al comienzo de q. -}
{- PRE: not is_empty_queue(q) -}

Implementá el TAD utilizando punteros (siguiendo la idea de nodos enlazados), de manera que todas las operaciones
(y los constructores) sean de orden constante.

Implement Queue of T where
type node of T = tuple
                    elem: T
                    next: pointer to (node of T)
                    end tuple
type Queue of T = tuple
                    first: pointer to (node of T)
                    last: pointer to (node of T)
                    end tuple

fun empty_queue() ret q : Queue of T
    alloc(q)                /*reservar memoria*/
    q.first = null
    q.last = null
end fun

proc enqueue (in/out q : Queue of T, in e : T)
    var newNode = pointer to (node of T)                /*creo variable de tipo puntero*/
    alloc(newNode)                                      /*reservo memoria*/
    newNode.elem = e
    newNode.next = null

    if (is_empty_queue(q)) then
        q.first = newNode
        q.last = newNode
    else
        q.last.next = newNode
    fi
end proc

fun is_empty_queue(q : Queue of T) ret b : Bool
    b = ((q.first == null) and (q.last == null))
end fun

fun rst(q : Queue of T) ret e : T
    e = q.first
end fun

proc dequeue (in/out q : Queue of T)
    var killme : pointer of (node of T)
    killme = q.first
    q.first = q.first.next
    free(killme)
end proc

/*Sexto ejercicio*/
(Para alumnos libres) Sea T un árbol (no necesariamente binario) y supongamos que deseamos encontrar la hoja que se encuentra más cerca de la raíz. Cuáles son las distintas maneras de recorrer T? Cuál de ellas elegirías para encontrar esa hoja y por qué?

//Las distintas maneras de recorrer un arbol son:
DFS
-Preorden
-Inorden
-Postorden

BFS
-Niveles

//Elegiria BFS, ya que recorre el arbol por niveles y la hoja mas cercana a la raiz se encuentra en el primer nivel que se recorre.
